"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"Indicates what fields are available at the top level of a query operation."
type User {
    id: ID!
    name: String!
    email: String!
    created_at: Date!
    updated_at: Date!
    folders: [Folder] @hasMany(relation: "folders")
}

type AuthPayload {
    user: User!
    token: String!
}

type Folder {
    id: ID!
    user_id: ID!
    title: String!
    created_at: Date!
    updated_at: Date!
    tasks: [Task!]! @hasMany(relation: "tasks")
}

type Task {
    id: ID!
    folder_id: ID!
    title: String!
    status: Int!
    due_date: Date!
    created_at: Date!
    updated_at: Date!
    folder: Folder! @belongsTo(relation: "folder")
}


type Query{
    folders(page: Int = 1, count: Int = 5): [Folder!]! @paginate(defaultCount: 5)
    # tasks(folder_id:ID! @eq):[Task!]! @find
    folder(id: ID! @eq): Folder @find 
    tasks(folder_id: ID! @where, page:Int=1, count: Int=5): [Task!]! @paginate(defaultCount: 5)
    task(id:ID! @eq): Task @find
    user: User @guard(with: ["sanctum"]) @field(resolver: "App\\GraphQL\\Queries\\UserQuery@me")
    #user
}



type Mutation {
##フォルダ
    createFolder(title: String! @rules(apply:["required","max:20"])): Folder @create
    updateFolder(id: ID! @rules(apply:["required","exists:folders,id"]), title: String!): Folder @update
    deleteFolder(id: ID! @whereKey): Folder @delete
    

  ##タスク
   createTask(
        folder_id: ID! @rules(apply:["required","exists:folders,id"]),
        title: String! @rules(apply:["required"]),
        status: Int! @rules(apply:["required", "integer", "min:1", "max:3"]),
        due_date: Date! @rules(apply:["required", "date", "after_or_equal:today"])
    ): Task @create

    updateTask(
        id: ID! @rules(apply:["required","exists:tasks,id"]),
        title: String @rules(apply:["sometimes","required"]),
        status: Int @rules(apply:["sometimes","integer", "min:1", "max:3"]),
        due_date: Date @rules(apply:["sometimes", "date", "after_or_equal:today"])
    ): Task @update

    deleteTask(id: ID! @whereKey): Task @delete
    # createTask(folder_id: ID! @rules(apply:["required","exists:folders,id"]), title: String!, status: Int!, due_date: Date!): Task @create
    # updateTask(id: ID!, title: String, status: Int, due_date: Date): Task @update
    # deleteTask(id: ID! @whereKey): Task @delete

    register(name: String!, email: String!, password: String!): AuthPayload @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@register")
    login(email: String!, password: String!): AuthPayload @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@login")
    logout: Boolean @guard(with: ["sanctum"]) @field(resolver: "App\\GraphQL\\Mutations\\AuthMutation@logout")

}



